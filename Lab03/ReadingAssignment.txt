1. Ưu điểm của Tính đa hình (Polymorphism):
Tính đa hình giúp tái sử dụng mã. Các lớp (class) đã được viết, kiểm thử và triển khai có thể tái sử dụng nhiều lần, từ đó tiết kiệm rất nhiều thời gian cho lập trình viên. Ngoài ra, bạn có thể thay đổi mã mà không ảnh hưởng đến mã gốc.

Một biến duy nhất có thể được sử dụng để lưu nhiều giá trị dữ liệu khác nhau. Giá trị của một biến được kế thừa từ lớp cha sang lớp con có thể được thay đổi mà không làm thay đổi giá trị của biến đó trong lớp cha hoặc các lớp con khác.

Với số dòng mã ít hơn, việc gỡ lỗi (debug) sẽ trở nên dễ dàng hơn cho lập trình viên.

2. Tính kế thừa (Inheritance) giúp đạt được tính đa hình (Polymorphism) trong Java như thế nào?
Kế thừa thiết lập mối quan hệ phân cấp giữa các lớp, trong đó lớp con được xem là một loại cụ thể của lớp cha. Mối quan hệ này là chìa khóa để kích hoạt tính đa hình trong Java.

Khi một lớp con ghi đè (override) một phương thức từ lớp cha, và đối tượng của lớp con được truy cập thông qua tham chiếu của lớp cha, Java sẽ xác định phương thức chính xác cần gọi tại thời điểm chạy (runtime).

Bằng cách coi đối tượng lớp con như là một thể hiện (instance) của lớp cha, Java cho phép sử dụng một giao diện nhất quán. Điều này giúp lập trình viên viết mã thao tác trên kiểu của lớp cha nhưng vẫn tận dụng hành vi của lớp con.

Một lợi ích phổ biến của tính đa hình là khả năng xử lý một tập hợp các đối tượng một cách đồng nhất.

Bằng cách dựa trên kiểu lớp cha trừu tượng thay vì các lớp con cụ thể, hệ thống sẽ ít phụ thuộc hơn vào các lớp cụ thể. Điều này giúp hệ thống ít bị ràng buộc, dễ mở rộng và bảo trì hơn.

3. Sự khác nhau giữa Tính đa hình (Polymorphism) và Tính kế thừa (Inheritance) trong Java:

Tiêu chí	Kế thừa (Inheritance)	Đa hình (Polymorphism)
Khái niệm	Là việc tái sử dụng mã bằng cách cho phép lớp con kế thừa thuộc tính và phương thức từ lớp cha.	Là việc sử dụng cùng một giao diện để thực hiện các hành vi khác nhau trên các đối tượng khác nhau.
Mục đích	Thiết lập mối quan hệ phân cấp ("is-a") và thúc đẩy việc tái sử dụng mã.	Tăng tính linh hoạt và hành vi động, cho phép quyết định phương thức nào được gọi tại thời điểm chạy.
Các loại	Bao gồm: kế thừa đơn, kế thừa đa cấp, kế thừa phân cấp.	Bao gồm: đa hình lúc biên dịch (nạp chồng - overloading) và đa hình lúc chạy (ghi đè - overriding).
Trọng tâm	Tập trung vào cấu trúc và hành vi được chia sẻ giữa các lớp có liên quan.	Tập trung vào hành vi — cách các phương thức hoạt động khác nhau dựa vào đối tượng.
Mối quan hệ	Tạo ra mối liên kết giữa các lớp, giúp kích hoạt tính đa hình.	Thường phụ thuộc vào kế thừa, đặc biệt trong trường hợp ghi đè phương thức.
Tái sử dụng vs. Linh hoạt	Mang lại khả năng tái sử dụng bằng cách kế thừa mã.	Mang lại sự linh hoạt bằng cách cho phép hành vi phương thức thay đổi theo kiểu đối tượng.
